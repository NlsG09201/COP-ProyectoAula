{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http = inject(HttpClient);\n    auth = inject(AuthService);\n    baseUrl = environment.apiUrl;\n    get(path) {\n      return this.http.get(`${this.baseUrl}${path}`, {\n        headers: this.authHeaders\n      });\n    }\n    post(path, body) {\n      return this.http.post(`${this.baseUrl}${path}`, body, {\n        headers: this.mergeHeaders(this.jsonHeaders, this.authHeaders)\n      });\n    }\n    put(path, body) {\n      return this.http.put(`${this.baseUrl}${path}`, body, {\n        headers: this.mergeHeaders(this.jsonHeaders, this.authHeaders)\n      });\n    }\n    delete(path) {\n      return this.http.delete(`${this.baseUrl}${path}`, {\n        headers: this.authHeaders\n      });\n    }\n    get jsonHeaders() {\n      return new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n    get authHeaders() {\n      const token = this.auth.token;\n      return token ? new HttpHeaders({\n        Authorization: `Basic ${token}`\n      }) : new HttpHeaders();\n    }\n    mergeHeaders(a, b) {\n      let merged = a;\n      b.keys().forEach(k => {\n        const v = b.get(k);\n        if (v) merged = merged.set(k, v);\n      });\n      return merged;\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}