{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let UiService = /*#__PURE__*/(() => {\n  class UiService {\n    router;\n    scrollToTopButton = null;\n    constructor(router) {\n      this.router = router;\n      this.setupScrollToTop();\n      this.setupRouteChangeHandler();\n    }\n    // Mobile menu toggle functionality\n    toggleMobileMenu() {\n      const navMenu = document.getElementById('main-menu');\n      if (navMenu) {\n        navMenu.classList.toggle('hidden');\n      }\n    }\n    // Close mobile menu\n    closeMobileMenu() {\n      const navMenu = document.getElementById('main-menu');\n      if (navMenu && window.innerWidth < 1024) {\n        navMenu.classList.add('hidden');\n      }\n    }\n    // Setup scroll to top button\n    setupScrollToTop() {\n      // Create scroll to top button if it doesn't exist\n      if (!this.scrollToTopButton) {\n        this.scrollToTopButton = document.createElement('button');\n        this.scrollToTopButton.id = 'scroll-to-top';\n        this.scrollToTopButton.innerHTML = '↑';\n        this.scrollToTopButton.style.cssText = `\n        position: fixed;\n        bottom: 2rem;\n        right: 2rem;\n        display: none;\n        background: #0891b2;\n        color: #fff;\n        border: none;\n        border-radius: 50%;\n        width: 2.5rem;\n        height: 2.5rem;\n        font-size: 1.5rem;\n        cursor: pointer;\n        z-index: 1000;\n        transition: all 0.3s ease;\n      `;\n        this.scrollToTopButton.addEventListener('click', () => {\n          window.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n          });\n        });\n        document.body.appendChild(this.scrollToTopButton);\n      }\n      // Show/hide button based on scroll position\n      window.addEventListener('scroll', () => {\n        if (this.scrollToTopButton) {\n          if (window.scrollY > 300) {\n            this.scrollToTopButton.style.display = 'block';\n          } else {\n            this.scrollToTopButton.style.display = 'none';\n          }\n        }\n      });\n    }\n    // Handle route changes for active link highlighting\n    setupRouteChangeHandler() {\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n        this.highlightActiveLink(event.url);\n        this.closeMobileMenu();\n        this.scrollToTop();\n      });\n    }\n    // Highlight active navigation link\n    highlightActiveLink(currentUrl) {\n      const navLinks = document.querySelectorAll('.nav-link');\n      navLinks.forEach(link => {\n        const linkElement = link;\n        linkElement.classList.remove('active');\n        const href = linkElement.getAttribute('routerLink') || linkElement.getAttribute('href');\n        if (href === currentUrl || currentUrl === '/' && href === '/home') {\n          linkElement.classList.add('active');\n        }\n      });\n    }\n    // Smooth scroll to top\n    scrollToTop() {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }\n    // Animate elements on scroll\n    animateOnScroll() {\n      const animated = document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right');\n      animated.forEach(el => {\n        const rect = el.getBoundingClientRect();\n        if (rect.top < window.innerHeight * 0.92) {\n          el.style.animationPlayState = 'running';\n        }\n      });\n    }\n    // Setup scroll animations\n    setupScrollAnimations() {\n      window.addEventListener('scroll', () => this.animateOnScroll());\n      // Initial check\n      setTimeout(() => this.animateOnScroll(), 100);\n    }\n    // Setup focus outline for accessibility\n    setupFocusOutline() {\n      document.body.addEventListener('keydown', e => {\n        if (e.key === 'Tab') {\n          document.body.classList.add('user-is-tabbing');\n        }\n      });\n      document.body.addEventListener('mousedown', () => {\n        document.body.classList.remove('user-is-tabbing');\n      });\n    }\n    // Close menu when clicking outside\n    setupClickOutsideHandler() {\n      document.addEventListener('click', e => {\n        const menuToggle = document.getElementById('menu-toggle');\n        const navMenu = document.getElementById('main-menu');\n        if (menuToggle && navMenu && !menuToggle.contains(e.target) && !navMenu.contains(e.target) && window.innerWidth < 1024 && !navMenu.classList.contains('hidden')) {\n          navMenu.classList.add('hidden');\n        }\n      });\n    }\n    static ɵfac = function UiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UiService)(i0.ɵɵinject(i1.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UiService,\n      factory: UiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}